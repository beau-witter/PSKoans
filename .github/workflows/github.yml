# This is a basic workflow to help you get started with Actions

name: PSKoans CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  NupkgArtifactName: 'PSKoans.nupkg'
  ModuleArtifactName: 'PSKoans'

jobs:

  create_changelog:
    name: 'Upload Changelog'
    
    # Don't run this step for pull requests
    if: ${{ github.head_ref == '' }}
    runs-on: ubuntu-latest

    env:
      FilePath: '$env:GITHUB_WORKSPACE/Changelog.md'

    steps:
      - uses: actions/checkout@v3

      - name: Generate Changelog
        shell: pwsh
        run: ./Build/New-Changelog.ps1 -Path "${{ env.FilePath }}" -ApiKey "${{ secrets.GITHUB_TOKEN }}"

      - name: Upload Changelog
        uses: actions/upload-artifact@v3
        with:
          name: Changelog.md
          path: $FilePath
          
  build:
    name: 'Build Module'
    runs-on: ubuntu-latest
    
    outputs:
      pester_min_version: ${{ steps.pestermin.outputs.pester_min_version }}
    
    env:
      FileSystemDeploymentPath: '$env:GITHUB_WORKSPACE/Deploy/FileSystem'
      BuiltModulePath: '$env:GITHUB_WORKSPACE/Deploy/PSKoans'
      # This needs to be set by the script which creates the nupkg
      NupkgPath: ''
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Get Pester min version
        id: pestermin
        shell: pwsh
        run: |
          $MinimumVersion = (Get-Module -ListAvailable ./PSKoans).RequiredModules.Where{$_.Name -eq 'Pester'}.Version.ToString()
          Write-Output "pester_min_version=$MinimumVersion" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "Minimum Pester Version: $MinimumVersion"

      - name: Install and cache PowerShell modules
        uses: potatoqualitee/psmodulecache@v5.2
        with:
          modules-to-cache: PSDeploy, BuildHelpers, PlatyPS, Pester:${{ env.pester_min_version }}, EZOut
          shell: pwsh

      - name: Setup Environment
        shell: pwsh
        run: ./Build/Initialize-Environment.ps1
        env:
          BUILD_SOURCEBRANCHNAME: ${{ env.GITHUB_REF_NAME}}
          BUILD_SOURCEBRANCH: ${{ env.GITHUB_REF }}

      - name: Build Module
        shell: pwsh
        run: ./Build/Build-Module.ps1
        env:
          PROJECTROOT: ${{ env.PROJECTROOT }}
          BUILTMODULEPATH: ${{ env.BuiltModulePath }}
          GITHUB_WORKSPACE: ${{ env.GITHUB_WORKSPACE }}

      - name: Upload Module Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ModuleArtifactName }}
          path: ${{ env.BuiltModulePath }}
          
      - name: Generate Nupkg
        shell: pwsh
        run: |
          $FileSystemDeploymentPath = $env.FileSystemDeploymentPath.Replace('$env:GITHUB_WORKSPACE', $env:GITHUB_WORKSPACE)
          ./Build/Register-FileSystemRepository.ps1 -Path $FileSystemDeploymentPath -Name 'FileSystem'
          ./Deploy/Publish.ps1 -Key 'filesystem' -Path $FileSystemDeploymentPath -OutputDirectory $FileSystemDeploymentPath
          
      - name: Upload Nupkg Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.NupkgArtifactName }}
          path: ${{ env.NupkgPath }}

  test:
    name: "Test Module"
    needs: build

    strategy:
      matrix:
        os:
          - windows-latest
          - macOS-latest
          - ubuntu-latest
  
    runs-on: ${{ matrix.os }}
    
    env:
      PackageDownloadPath: '$env:GITHUB_WORKSPACE/Module'
      PSRepositoryName: 'FileSystem'
      # The following variables MUST be set in Invoke-ModuleTests.ps1
      TestFile: ''
      CodeCoverageFile: ''
      ModuleFolders: ''

    steps:
      - uses: actions/checkout@v3
      
      - name: Get Pester min version
        id: pestermin
        shell: pwsh
        run: |
          $MinimumVersion = (Get-Module -ListAvailable ./PSKoans).RequiredModules.Where{$_.Name -eq 'Pester'}.Version.ToString()
          Write-Output "pester_min_version=$MinimumVersion" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "Minimum Pester Version: $MinimumVersion"

      - name: Install and cache PowerShell modules
        uses: potatoqualitee/psmodulecache@v5.2
        with:
          modules-to-cache: PSDeploy, BuildHelpers, PlatyPS, Pester:${{ env.pester_min_version }}, EZOut
          shell: pwsh

      - name: Setup Environment
        shell: pwsh
        run: ./Build/Initialize-Environment.ps1
        
      - name: Register FileSystem Repository
        shell: pwsh
        run: ./Build/Register-FileSystemRepository.ps1 -Path '${{ env.PackageDownloadPath }}' -Name '${{ env.PSRepositoryName }}'
      
      - name: Download Module Nupkg
        uses: actions/download-artifact@v2.0.9
        with:
          name: $NupkgArtifactName
          path: $PackageDownloadPath
          
      - name: Install Module from Nupkg
        shell: pwsh
        run: |
          $pesterParams = @{
              Name           = 'Pester'
              MinimumVersion = Get-Content -Path "${{ needs.build.outputs.pester_min_version }}"
              ProviderName   = 'NuGet'
              Path           = '${{ env.PackageDownloadPath }}'
              Force          = $true
              Source         = 'PSGallery'
          }
          Register-PackageSource -Name PSGallery -ProviderName NuGet -Location https://www.powershellgallery.com/api/v2 -Force
          Save-Package @pesterParams | Select-Object -Property Name, Version, Status, Source
          Install-Module PSKoans -Repository ${{ env.PSRepositoryName }} -Force -Scope CurrentUser
      
      - name: Run Pester Tests
        shell: pwsh
        run: ./Build/Invoke-ModuleTests.ps1
        
      - name: Publish Test Results
        if: ${{ always() }}
        uses: MirageNet/nunit-reporter@v1.0.5
        with:
          access-token: ${{ secrets.GITHUB_TOKEN }}
          path: '$GITHUB_WORKSPACE\$TestResults'
          
      - name: Generate Code Coverage
        uses: danielpalme/ReportGenerator-GitHub-Action@4.8.8
        with:
          reports: '$env:GITHUB_WORKSPACE\$CodeCoverageFile'
          targetdir: '$env:GITHUB_WORKSPACE\coveragereports'
          sourcedirs: $SourceFolders
          title: PSKoans Code Coverage
          
      - name: Publish Code Coverage artifacts
        uses: actions/upload-artifact@v2.2.3
        with:
          name: 'Code Coverage Reports'
          path: '$env:GITHUB_WORKSPACE\coveragereports'
          
  publish:
    needs: test
    if: ${{ success() && startsWith( 'refs/tags/', github.ref ) }}
    
    runs-on: ubuntu-latest
    
    env:
      BuiltModulePath: '$env:GITHUB_WORKSPACE/Deploy/PSKoans'
      GalleryDeploymentPath: '$env:GITHUB_WORKSPACE/Deploy/PSGallery'
      # This variable must be set by the script
      TagName: ''
      
    steps:
      - uses: actions/checkout@v3
      
      - name: Download Module Artifact
        uses: actions/download-artifact@v2.0.9
        with:
          name: $ModuleArtifactName
          path: $BuiltModulePath
          
      - name: Deploy Module to PSGallery
        shell: pwsh
        run: ./Deploy/Publish.ps1 -ApiKey '${{ secrets.PSGALLERYAPIKEY }}' -Path '${{ env.GalleryDeploymentPath }}'
        
      - name: Set Release Tag Name
        shell: pwsh
        run: |
          $tagName = ("${{ github.ref }}" -replace '^refs/tags/').Trim()
          "TagName=$tagname" | Add-Content -Path '${{ github.env }}'
          
      - name: Download Artifacts
        uses: actions/download-artifact@v2.0.9
        with:
          path: '$env:GITHUB_WORKSPACE/artifacts'
          
      - name: Update Release with Artifacts & Changelog
        uses: Roang-zero1/github-create-release-action@v2.1.0
        with:
          created_tag: $TagName
          changelog_file: '$env:GITHUB_WORKSPACE/artifacts/Changelog.md'
          release_title: 'PSKoans Release $TagName'
